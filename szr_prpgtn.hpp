// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace szr_prpgtn_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/hfw/vepsoft/vep-benchmark/szr_prpgtn.stan");
    reader.add_event(106, 104, "end", "/home/hfw/vepsoft/vep-benchmark/szr_prpgtn.stan");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
vector_differencing(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("D", "num_elements(x)", num_elements(x));
        validate_non_negative_index("D", "num_elements(x)", num_elements(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(num_elements(x)),static_cast<Eigen::VectorXd::Index>(num_elements(x)));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);


        current_statement_begin__ = 5;
        for (int i = 1; i <= num_elements(x); ++i) {

            current_statement_begin__ = 6;
            stan::model::assign(D, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        subtract(x,get_base1(x,i,"x",1)), 
                        "assigning variable D");
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(D);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vector_differencing_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x, std::ostream* pstream__) const {
        return vector_differencing(x, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, 1,Eigen::Dynamic>
x_step(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const T2__& I1,
           const T3__& time_step, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        int nn(0);
        (void) nn;  // dummy to suppress unused var warning

        stan::math::fill(nn, std::numeric_limits<int>::min());
        stan::math::assign(nn,num_elements(x));
        current_statement_begin__ = 13;
        validate_non_negative_index("x_next", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x_next(static_cast<Eigen::VectorXd::Index>(nn));
        (void) x_next;  // dummy to suppress unused var warning

        stan::math::initialize(x_next, DUMMY_VAR__);
        stan::math::fill(x_next,DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("I1_vec", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  I1_vec(static_cast<Eigen::VectorXd::Index>(nn));
        (void) I1_vec;  // dummy to suppress unused var warning

        stan::math::initialize(I1_vec, DUMMY_VAR__);
        stan::math::fill(I1_vec,DUMMY_VAR__);
        stan::math::assign(I1_vec,rep_row_vector((I1 + 1.0),nn));
        current_statement_begin__ = 15;
        validate_non_negative_index("dx", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  dx(static_cast<Eigen::VectorXd::Index>(nn));
        (void) dx;  // dummy to suppress unused var warning

        stan::math::initialize(dx, DUMMY_VAR__);
        stan::math::fill(dx,DUMMY_VAR__);
        stan::math::assign(dx,subtract(subtract(subtract(I1_vec,elt_multiply(elt_multiply(x,x),x)),multiply(2.0,elt_multiply(x,x))),z));


        current_statement_begin__ = 16;
        stan::math::assign(x_next, add(x,multiply(time_step,dx)));
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_next);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct x_step_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const T2__& I1,
           const T3__& time_step, std::ostream* pstream__) const {
        return x_step(x, z, I1, time_step, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, 1,Eigen::Dynamic>
z_step(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& x0,
           const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& FC,
           const T4__& time_step,
           const T5__& tau0, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        int nn(0);
        (void) nn;  // dummy to suppress unused var warning

        stan::math::fill(nn, std::numeric_limits<int>::min());
        stan::math::assign(nn,num_elements(z));
        current_statement_begin__ = 23;
        validate_non_negative_index("z_next", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_next(static_cast<Eigen::VectorXd::Index>(nn));
        (void) z_next;  // dummy to suppress unused var warning

        stan::math::initialize(z_next, DUMMY_VAR__);
        stan::math::fill(z_next,DUMMY_VAR__);
        current_statement_begin__ = 24;
        validate_non_negative_index("D", "nn", nn);
        validate_non_negative_index("D", "nn", nn);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(nn),static_cast<Eigen::VectorXd::Index>(nn));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);
        stan::math::assign(D,vector_differencing(x, pstream__));
        current_statement_begin__ = 25;
        validate_non_negative_index("gx", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  gx(static_cast<Eigen::VectorXd::Index>(nn));
        (void) gx;  // dummy to suppress unused var warning

        stan::math::initialize(gx, DUMMY_VAR__);
        stan::math::fill(gx,DUMMY_VAR__);
        stan::math::assign(gx,to_row_vector(rows_dot_product(FC,D)));
        current_statement_begin__ = 26;
        validate_non_negative_index("dz", "nn", nn);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  dz(static_cast<Eigen::VectorXd::Index>(nn));
        (void) dz;  // dummy to suppress unused var warning

        stan::math::initialize(dz, DUMMY_VAR__);
        stan::math::fill(dz,DUMMY_VAR__);
        stan::math::assign(dz,multiply(inv(tau0),subtract(subtract(multiply(4,subtract(x,x0)),z),gx)));


        current_statement_begin__ = 27;
        stan::math::assign(z_next, add(z,multiply(time_step,dz)));
        current_statement_begin__ = 28;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z_next);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct z_step_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
           const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
           const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& x0,
           const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& FC,
           const T4__& time_step,
           const T5__& tau0, std::ostream* pstream__) const {
        return z_step(x, z, x0, FC, time_step, tau0, pstream__);
    }
};

class szr_prpgtn_model : public prob_grad {
private:
    int nn;
    int ns;
    int nt;
    matrix_d gain;
    matrix_d SC;
    vector<row_vector_d> slp;
    row_vector_d snsr_pwr;
    row_vector_d x0_mu;
    double I1;
    double time_step;
public:
    szr_prpgtn_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    szr_prpgtn_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "szr_prpgtn_model_namespace::szr_prpgtn_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "nn", "int", context__.to_vec());
            nn = int(0);
            vals_i__ = context__.vals_i("nn");
            pos__ = 0;
            nn = vals_i__[pos__++];
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "ns", "int", context__.to_vec());
            ns = int(0);
            vals_i__ = context__.vals_i("ns");
            pos__ = 0;
            ns = vals_i__[pos__++];
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 36;
            validate_non_negative_index("gain", "ns", ns);
            validate_non_negative_index("gain", "nn", nn);
            context__.validate_dims("data initialization", "gain", "matrix_d", context__.to_vec(ns,nn));
            validate_non_negative_index("gain", "ns", ns);
            validate_non_negative_index("gain", "nn", nn);
            gain = matrix_d(static_cast<Eigen::VectorXd::Index>(ns),static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("gain");
            pos__ = 0;
            size_t gain_m_mat_lim__ = ns;
            size_t gain_n_mat_lim__ = nn;
            for (size_t n_mat__ = 0; n_mat__ < gain_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < gain_m_mat_lim__; ++m_mat__) {
                    gain(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("SC", "nn", nn);
            validate_non_negative_index("SC", "nn", nn);
            context__.validate_dims("data initialization", "SC", "matrix_d", context__.to_vec(nn,nn));
            validate_non_negative_index("SC", "nn", nn);
            validate_non_negative_index("SC", "nn", nn);
            SC = matrix_d(static_cast<Eigen::VectorXd::Index>(nn),static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("SC");
            pos__ = 0;
            size_t SC_m_mat_lim__ = nn;
            size_t SC_n_mat_lim__ = nn;
            for (size_t n_mat__ = 0; n_mat__ < SC_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < SC_m_mat_lim__; ++m_mat__) {
                    SC(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 40;
            validate_non_negative_index("slp", "nt", nt);
            validate_non_negative_index("slp", "ns", ns);
            context__.validate_dims("data initialization", "slp", "row_vector_d", context__.to_vec(nt,ns));
            validate_non_negative_index("slp", "nt", nt);
            validate_non_negative_index("slp", "ns", ns);
            slp = std::vector<row_vector_d>(nt,row_vector_d(static_cast<Eigen::VectorXd::Index>(ns)));
            vals_r__ = context__.vals_r("slp");
            pos__ = 0;
            size_t slp_i_vec_lim__ = ns;
            for (size_t i_vec__ = 0; i_vec__ < slp_i_vec_lim__; ++i_vec__) {
                size_t slp_limit_0__ = nt;
                for (size_t i_0__ = 0; i_0__ < slp_limit_0__; ++i_0__) {
                    slp[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("snsr_pwr", "ns", ns);
            context__.validate_dims("data initialization", "snsr_pwr", "row_vector_d", context__.to_vec(ns));
            validate_non_negative_index("snsr_pwr", "ns", ns);
            snsr_pwr = row_vector_d(static_cast<Eigen::VectorXd::Index>(ns));
            vals_r__ = context__.vals_r("snsr_pwr");
            pos__ = 0;
            size_t snsr_pwr_i_vec_lim__ = ns;
            for (size_t i_vec__ = 0; i_vec__ < snsr_pwr_i_vec_lim__; ++i_vec__) {
                snsr_pwr[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("x0_mu", "nn", nn);
            context__.validate_dims("data initialization", "x0_mu", "row_vector_d", context__.to_vec(nn));
            validate_non_negative_index("x0_mu", "nn", nn);
            x0_mu = row_vector_d(static_cast<Eigen::VectorXd::Index>(nn));
            vals_r__ = context__.vals_r("x0_mu");
            pos__ = 0;
            size_t x0_mu_i_vec_lim__ = nn;
            for (size_t i_vec__ = 0; i_vec__ < x0_mu_i_vec_lim__; ++i_vec__) {
                x0_mu[i_vec__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 33;
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;
            current_statement_begin__ = 37;
            check_greater_or_equal(function__,"SC",SC,0.0);
            current_statement_begin__ = 40;
            current_statement_begin__ = 41;
            current_statement_begin__ = 44;
            // initialize data variables
            current_statement_begin__ = 48;
            I1 = double(0);
            stan::math::fill(I1,DUMMY_VAR__);
            stan::math::assign(I1,3.1000000000000001);
            current_statement_begin__ = 49;
            time_step = double(0);
            stan::math::fill(time_step,DUMMY_VAR__);
            stan::math::assign(time_step,0.10000000000000001);


            // validate transformed data
            current_statement_begin__ = 48;
            current_statement_begin__ = 49;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 53;
        validate_non_negative_index("x0", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 54;
            ++num_params_r__;
            current_statement_begin__ = 55;
            ++num_params_r__;
            current_statement_begin__ = 56;
            ++num_params_r__;
            current_statement_begin__ = 57;
            ++num_params_r__;
            current_statement_begin__ = 58;
        validate_non_negative_index("x_init", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 59;
        validate_non_negative_index("z_init", "nn", nn);
            num_params_r__ += nn;
            current_statement_begin__ = 60;
            ++num_params_r__;
            current_statement_begin__ = 61;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~szr_prpgtn_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("x0")))
            throw std::runtime_error("variable x0 missing");
        vals_r__ = context__.vals_r("x0");
        pos__ = 0U;
        validate_non_negative_index("x0", "nn", nn);
        context__.validate_dims("initialization", "x0", "row_vector_d", context__.to_vec(nn));
        row_vector_d x0(static_cast<Eigen::VectorXd::Index>(nn));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            x0(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(x0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x0: ") + e.what());
        }

        if (!(context__.contains_r("amplitude")))
            throw std::runtime_error("variable amplitude missing");
        vals_r__ = context__.vals_r("amplitude");
        pos__ = 0U;
        context__.validate_dims("initialization", "amplitude", "double", context__.to_vec());
        double amplitude(0);
        amplitude = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(amplitude);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable amplitude: ") + e.what());
        }

        if (!(context__.contains_r("offset")))
            throw std::runtime_error("variable offset missing");
        vals_r__ = context__.vals_r("offset");
        pos__ = 0U;
        context__.validate_dims("initialization", "offset", "double", context__.to_vec());
        double offset(0);
        offset = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(offset);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable offset: ") + e.what());
        }

        if (!(context__.contains_r("K")))
            throw std::runtime_error("variable K missing");
        vals_r__ = context__.vals_r("K");
        pos__ = 0U;
        context__.validate_dims("initialization", "K", "double", context__.to_vec());
        double K(0);
        K = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(K);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable K: ") + e.what());
        }

        if (!(context__.contains_r("tau0")))
            throw std::runtime_error("variable tau0 missing");
        vals_r__ = context__.vals_r("tau0");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau0", "double", context__.to_vec());
        double tau0(0);
        tau0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(tau0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau0: ") + e.what());
        }

        if (!(context__.contains_r("x_init")))
            throw std::runtime_error("variable x_init missing");
        vals_r__ = context__.vals_r("x_init");
        pos__ = 0U;
        validate_non_negative_index("x_init", "nn", nn);
        context__.validate_dims("initialization", "x_init", "row_vector_d", context__.to_vec(nn));
        row_vector_d x_init(static_cast<Eigen::VectorXd::Index>(nn));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            x_init(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(x_init);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable x_init: ") + e.what());
        }

        if (!(context__.contains_r("z_init")))
            throw std::runtime_error("variable z_init missing");
        vals_r__ = context__.vals_r("z_init");
        pos__ = 0U;
        validate_non_negative_index("z_init", "nn", nn);
        context__.validate_dims("initialization", "z_init", "row_vector_d", context__.to_vec(nn));
        row_vector_d z_init(static_cast<Eigen::VectorXd::Index>(nn));
        for (int j1__ = 0U; j1__ < nn; ++j1__)
            z_init(j1__) = vals_r__[pos__++];
        try {
            writer__.row_vector_unconstrain(z_init);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_init: ") + e.what());
        }

        if (!(context__.contains_r("eps_slp")))
            throw std::runtime_error("variable eps_slp missing");
        vals_r__ = context__.vals_r("eps_slp");
        pos__ = 0U;
        context__.validate_dims("initialization", "eps_slp", "double", context__.to_vec());
        double eps_slp(0);
        eps_slp = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(eps_slp);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable eps_slp: ") + e.what());
        }

        if (!(context__.contains_r("eps_snsr_pwr")))
            throw std::runtime_error("variable eps_snsr_pwr missing");
        vals_r__ = context__.vals_r("eps_snsr_pwr");
        pos__ = 0U;
        context__.validate_dims("initialization", "eps_snsr_pwr", "double", context__.to_vec());
        double eps_snsr_pwr(0);
        eps_snsr_pwr = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(eps_snsr_pwr);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable eps_snsr_pwr: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x0;
            (void) x0;  // dummy to suppress unused var warning
            if (jacobian__)
                x0 = in__.row_vector_constrain(nn,lp__);
            else
                x0 = in__.row_vector_constrain(nn);

            local_scalar_t__ amplitude;
            (void) amplitude;  // dummy to suppress unused var warning
            if (jacobian__)
                amplitude = in__.scalar_constrain(lp__);
            else
                amplitude = in__.scalar_constrain();

            local_scalar_t__ offset;
            (void) offset;  // dummy to suppress unused var warning
            if (jacobian__)
                offset = in__.scalar_constrain(lp__);
            else
                offset = in__.scalar_constrain();

            local_scalar_t__ K;
            (void) K;  // dummy to suppress unused var warning
            if (jacobian__)
                K = in__.scalar_constrain(lp__);
            else
                K = in__.scalar_constrain();

            local_scalar_t__ tau0;
            (void) tau0;  // dummy to suppress unused var warning
            if (jacobian__)
                tau0 = in__.scalar_constrain(lp__);
            else
                tau0 = in__.scalar_constrain();

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  x_init;
            (void) x_init;  // dummy to suppress unused var warning
            if (jacobian__)
                x_init = in__.row_vector_constrain(nn,lp__);
            else
                x_init = in__.row_vector_constrain(nn);

            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  z_init;
            (void) z_init;  // dummy to suppress unused var warning
            if (jacobian__)
                z_init = in__.row_vector_constrain(nn,lp__);
            else
                z_init = in__.row_vector_constrain(nn);

            local_scalar_t__ eps_slp;
            (void) eps_slp;  // dummy to suppress unused var warning
            if (jacobian__)
                eps_slp = in__.scalar_constrain(lp__);
            else
                eps_slp = in__.scalar_constrain();

            local_scalar_t__ eps_snsr_pwr;
            (void) eps_snsr_pwr;  // dummy to suppress unused var warning
            if (jacobian__)
                eps_snsr_pwr = in__.scalar_constrain(lp__);
            else
                eps_snsr_pwr = in__.scalar_constrain();


            // transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("x", "nn", nn);
            validate_non_negative_index("x", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("z", "nn", nn);
            validate_non_negative_index("z", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z,DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("mu_slp", "ns", ns);
            validate_non_negative_index("mu_slp", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > mu_slp(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(ns))));
            stan::math::initialize(mu_slp, DUMMY_VAR__);
            stan::math::fill(mu_slp,DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("mu_snsr_pwr", "ns", ns);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  mu_snsr_pwr(static_cast<Eigen::VectorXd::Index>(ns));
            (void) mu_snsr_pwr;  // dummy to suppress unused var warning

            stan::math::initialize(mu_snsr_pwr, DUMMY_VAR__);
            stan::math::fill(mu_snsr_pwr,DUMMY_VAR__);
            stan::math::assign(mu_snsr_pwr,rep_row_vector(0,ns));


            current_statement_begin__ = 70;
            for (int t = 1; t <= nt; ++t) {

                current_statement_begin__ = 71;
                if (as_bool(logical_eq(t,1))) {

                    current_statement_begin__ = 72;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                x_step(x_init,z_init,I1,time_step, pstream__), 
                                "assigning variable x");
                    current_statement_begin__ = 73;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                z_step(x_init,z_init,x0,multiply(K,SC),time_step,tau0, pstream__), 
                                "assigning variable z");
                } else {

                    current_statement_begin__ = 76;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                stan::model::deep_copy(x_step(get_base1(x,(t - 1),"x",1),get_base1(z,(t - 1),"z",1),I1,time_step, pstream__)), 
                                "assigning variable x");
                    current_statement_begin__ = 77;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                stan::model::deep_copy(z_step(get_base1(x,(t - 1),"x",1),get_base1(z,(t - 1),"z",1),x0,multiply(K,SC),time_step,tau0, pstream__)), 
                                "assigning variable z");
                }
                current_statement_begin__ = 79;
                stan::model::assign(mu_slp, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply(amplitude,add(transpose(stan::math::log(multiply(gain,transpose(stan::math::exp(get_base1(x,t,"x",1)))))),offset)), 
                            "assigning variable mu_slp");
                current_statement_begin__ = 80;
                stan::math::assign(mu_snsr_pwr, add(mu_snsr_pwr, elt_multiply(get_base1(mu_slp,t,"mu_slp",1),get_base1(mu_slp,t,"mu_slp",1))));
            }
            current_statement_begin__ = 82;
            stan::math::assign(mu_snsr_pwr, stan::model::deep_copy(divide(mu_snsr_pwr,nt)));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < nn; ++i1__) {
                    if (stan::math::is_uninitialized(x[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < nn; ++i1__) {
                    if (stan::math::is_uninitialized(z[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: z" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < ns; ++i1__) {
                    if (stan::math::is_uninitialized(mu_slp[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu_slp" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < ns; ++i0__) {
                if (stan::math::is_uninitialized(mu_snsr_pwr(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_snsr_pwr" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 66;
            current_statement_begin__ = 67;
            current_statement_begin__ = 68;
            current_statement_begin__ = 69;

            // model body

            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(x0, x0_mu, 1.0));
            current_statement_begin__ = 87;
            lp_accum__.add(normal_log<propto__>(amplitude, 1.0, 10.0));
            if (amplitude < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 1.0, 10.0));
            current_statement_begin__ = 88;
            lp_accum__.add(normal_log<propto__>(offset, 0, 10.0));
            current_statement_begin__ = 89;
            lp_accum__.add(normal_log<propto__>(tau0, 20, 10.0));
            if (tau0 < 5) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(5, 20, 10.0));
            current_statement_begin__ = 90;
            lp_accum__.add(normal_log<propto__>(K, 1.0, 10.0));
            if (K < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 1.0, 10.0));
            current_statement_begin__ = 91;
            for (int i = 1; i <= nn; ++i) {

                current_statement_begin__ = 92;
                lp_accum__.add(normal_log<propto__>(get_base1(x_init,i,"x_init",1), -(2.0), 10.0));
                current_statement_begin__ = 93;
                lp_accum__.add(normal_log<propto__>(get_base1(z_init,i,"z_init",1), 3.5, 10.0));
            }
            current_statement_begin__ = 95;
            lp_accum__.add(normal_log<propto__>(eps_slp, 1, 10));
            if (eps_slp < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 1, 10));
            current_statement_begin__ = 96;
            lp_accum__.add(normal_log<propto__>(eps_snsr_pwr, 1, 10));
            if (eps_snsr_pwr < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 1, 10));
            current_statement_begin__ = 97;
            for (int t = 1; t <= nt; ++t) {

                current_statement_begin__ = 98;
                lp_accum__.add(normal_log(get_base1(slp,t,"slp",1),get_base1(mu_slp,t,"mu_slp",1),eps_slp));
            }
            current_statement_begin__ = 100;
            lp_accum__.add(normal_log(snsr_pwr,mu_snsr_pwr,eps_snsr_pwr));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x0");
        names__.push_back("amplitude");
        names__.push_back("offset");
        names__.push_back("K");
        names__.push_back("tau0");
        names__.push_back("x_init");
        names__.push_back("z_init");
        names__.push_back("eps_slp");
        names__.push_back("eps_snsr_pwr");
        names__.push_back("x");
        names__.push_back("z");
        names__.push_back("mu_slp");
        names__.push_back("mu_snsr_pwr");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(nn);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ns);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "szr_prpgtn_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        row_vector_d x0 = in__.row_vector_constrain(nn);
        double amplitude = in__.scalar_constrain();
        double offset = in__.scalar_constrain();
        double K = in__.scalar_constrain();
        double tau0 = in__.scalar_constrain();
        row_vector_d x_init = in__.row_vector_constrain(nn);
        row_vector_d z_init = in__.row_vector_constrain(nn);
        double eps_slp = in__.scalar_constrain();
        double eps_snsr_pwr = in__.scalar_constrain();
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(x0[k_0__]);
            }
        vars__.push_back(amplitude);
        vars__.push_back(offset);
        vars__.push_back(K);
        vars__.push_back(tau0);
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(x_init[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nn; ++k_0__) {
            vars__.push_back(z_init[k_0__]);
            }
        vars__.push_back(eps_slp);
        vars__.push_back(eps_snsr_pwr);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 66;
            validate_non_negative_index("x", "nn", nn);
            validate_non_negative_index("x", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > x(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("z", "nn", nn);
            validate_non_negative_index("z", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > z(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(nn))));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z,DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("mu_slp", "ns", ns);
            validate_non_negative_index("mu_slp", "nt", nt);
            vector<Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> > mu_slp(nt, (Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic> (static_cast<Eigen::VectorXd::Index>(ns))));
            stan::math::initialize(mu_slp, DUMMY_VAR__);
            stan::math::fill(mu_slp,DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("mu_snsr_pwr", "ns", ns);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  mu_snsr_pwr(static_cast<Eigen::VectorXd::Index>(ns));
            (void) mu_snsr_pwr;  // dummy to suppress unused var warning

            stan::math::initialize(mu_snsr_pwr, DUMMY_VAR__);
            stan::math::fill(mu_snsr_pwr,DUMMY_VAR__);
            stan::math::assign(mu_snsr_pwr,rep_row_vector(0,ns));


            current_statement_begin__ = 70;
            for (int t = 1; t <= nt; ++t) {

                current_statement_begin__ = 71;
                if (as_bool(logical_eq(t,1))) {

                    current_statement_begin__ = 72;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                x_step(x_init,z_init,I1,time_step, pstream__), 
                                "assigning variable x");
                    current_statement_begin__ = 73;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                z_step(x_init,z_init,x0,multiply(K,SC),time_step,tau0, pstream__), 
                                "assigning variable z");
                } else {

                    current_statement_begin__ = 76;
                    stan::model::assign(x, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                stan::model::deep_copy(x_step(get_base1(x,(t - 1),"x",1),get_base1(z,(t - 1),"z",1),I1,time_step, pstream__)), 
                                "assigning variable x");
                    current_statement_begin__ = 77;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                stan::model::deep_copy(z_step(get_base1(x,(t - 1),"x",1),get_base1(z,(t - 1),"z",1),x0,multiply(K,SC),time_step,tau0, pstream__)), 
                                "assigning variable z");
                }
                current_statement_begin__ = 79;
                stan::model::assign(mu_slp, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            multiply(amplitude,add(transpose(stan::math::log(multiply(gain,transpose(stan::math::exp(get_base1(x,t,"x",1)))))),offset)), 
                            "assigning variable mu_slp");
                current_statement_begin__ = 80;
                stan::math::assign(mu_snsr_pwr, add(mu_snsr_pwr, elt_multiply(get_base1(mu_slp,t,"mu_slp",1),get_base1(mu_slp,t,"mu_slp",1))));
            }
            current_statement_begin__ = 82;
            stan::math::assign(mu_snsr_pwr, stan::model::deep_copy(divide(mu_snsr_pwr,nt)));

            // validate transformed parameters
            current_statement_begin__ = 66;
            current_statement_begin__ = 67;
            current_statement_begin__ = 68;
            current_statement_begin__ = 69;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < nn; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(x[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < nn; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(z[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < ns; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(mu_slp[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < ns; ++k_0__) {
            vars__.push_back(mu_snsr_pwr[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "szr_prpgtn_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "amplitude";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "K";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eps_slp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "eps_snsr_pwr";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= ns; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_slp" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= ns; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_snsr_pwr" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "amplitude";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "K";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau0";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nn; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_init" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eps_slp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "eps_snsr_pwr";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= nn; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= ns; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_slp" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= ns; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_snsr_pwr" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef szr_prpgtn_model_namespace::szr_prpgtn_model stan_model;

